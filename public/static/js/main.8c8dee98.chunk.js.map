{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","LoopCircleLoading","console","log","launches","map","key","LAUNCH_QUERY","Launch","useParams","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","cache","InMemoryCache","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8c8dee98.chunk.js","sourcesContent":["import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst LaunchItem = ({launch: {flight_number, mission_name, launch_date_local, launch_success}}) => {\r\n    return (\r\n        <div className=\"card card-body mb-3\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-9\">\r\n                    <h5>Mission: <span className={launch_success ? `text-success` : `text-danger`}>{mission_name}</span></h5>\r\n                    <p>Date: <Moment format=\"YYYY-MM-DD LT\">{launch_date_local}</Moment></p>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LaunchItem;","import React from 'react'\r\n\r\nexport default function MissionKey() {\r\n    return (\r\n        <div>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\r\n            </p>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-danger\" /> = Fail\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKey from './MissionKey';\r\nimport { BoxLoading } from 'react-loadingg';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  query launchesQuery {\r\n    launches {\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_year\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\n\r\nconst Launches = () => {\r\n  const { loading, error, data } = useQuery(LAUNCHES_QUERY);\r\n  if (loading) return <BoxLoading LoopCircleLoading />;\r\n  if (error) return <p>Ops Something is wrong :(</p>;\r\n  console.log(data);\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"text-center mt-4 mb-4\">SpaceX</h1>\r\n      <h4>Launches</h4>\r\n      <MissionKey />\r\n\r\n      {data.launches.map((launch) => (\r\n        <LaunchItem key={launch.flight_number} launch={launch} />\r\n      ))}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Launches;\r\n","import React from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport BoxLoading from 'react-loadingg/lib/BoxLoading';\r\nimport Moment from 'react-moment';\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number: Int!) {\r\n    launch(flight_number: $flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_year\r\n      launch_success\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Launch = () => {\r\n  let { flight_number } = useParams();\r\n  flight_number = parseInt(flight_number);\r\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\r\n    variables: { flight_number },\r\n  });\r\n  if (loading) return <BoxLoading LoopCircleLoading />;\r\n  if (error) return <p>Ops Something is wrong :(</p>;\r\n\r\n  const {\r\n    mission_name,\r\n    launch_year,\r\n    launch_date_local,\r\n    launch_success,\r\n    rocket: { rocket_id, rocket_name, rocket_type },\r\n  } = data.launch;\r\n\r\n  return (\r\n    <div>\r\n      <h3 className=\"display-5 my-3\">\r\n        <span className=\"text-dark\">Mission :</span> <span className={launch_success ? 'text-success' : 'text-danger'}>{mission_name}</span>\r\n        </h3>\r\n        <h5>Launch Details: </h5>\r\n        <ul className=\"list-group\">\r\n            <li className=\"list-group-item\">\r\n                Flight Number: {flight_number}\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n                Launch Year: {launch_year}\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n                Launch Date: <Moment format=\"YYYY-MM-DD LT\">{launch_date_local}</Moment>\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n                Mission Result: <span className={launch_success ? 'text-success' : 'text-danger'}>{launch_success ? \"Success\" : \"Fail\"}</span>\r\n            </li>\r\n        </ul>\r\n        <h5>Rocket Details</h5>\r\n        <ul className=\"list-group\">\r\n        <li className=\"list-group-item\">\r\n                Rocket Id: {rocket_id}\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n                Rocket Name: {rocket_name}\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n                Rocket Type: {rocket_type}\r\n            </li>\r\n        </ul>\r\n        <hr/>\r\n        <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Launch;\r\n","import React from 'react';\nimport './App.css';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"container\">\n        <Router>\n          <Switch>\n            <Route exact path=\"/\">\n              <Launches />\n            </Route>\n            <Route exact path=\"/launch/:flight_number\">\n              <Launch />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}